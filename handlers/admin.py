from sre_constants import ANY
from aiogram import Dispatcher, types
import aiogram
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import admin_data
from decouple import config
from message import answer
from timetable import multy_replase
from config import bot


async def admin(message: types.Message):
    await message.answer(
        "*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º—ñ–Ω–∞:*\n\n"
        + "/all\_stats ‚Äì –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        + "/last\_activity ‚Äì –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        + "/last\_users ‚Äì UID –æ—Å—Ç–∞–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        + "/all\_active ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        + "/send\_msg\_user ‚Äì –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ UID\n",
        parse_mode="MarkdownV2",
    )


async def all_stats(message: types.Message):
    res = await admin_data("all-stats")
    await message.answer(
        "üë§ *–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ‚Äì *"
        + str(res[0])
        + "\n‚úÖ    –ê–∫—Ç–∏–≤–Ω–∏—Ö ‚Äì "
        + str(res[1])
        + "\n‚õîÔ∏è    –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞ ‚Äì "
        + str(res[2])
        + "\n\nüéì *–í—Å—å–æ–≥–æ c—Ç—É–¥–µ–Ω—Ç—ñ–≤ ‚Äì *"
        + str(res[3])
        + "\n‚úÖ    –ê–∫—Ç–∏–≤–Ω–∏—Ö ‚Äì "
        + str(res[4])
        + "\n‚õîÔ∏è    –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞ ‚Äì "
        + str(res[5])
        + "\n\nüíº *–í—Å—å–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ ‚Äì *"
        + str(res[6])
        + "\n‚úÖ    –ê–∫—Ç–∏–≤–Ω–∏—Ö ‚Äì "
        + str(res[7])
        + "\n‚õîÔ∏è    –ó–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞ ‚Äì "
        + str(res[8])
        + "\n\n‚ö†Ô∏è *–ù–µ–≤–∏–∑–Ω–∞—á–∏–ª–∏—Å—å ‚Äì *"
        + str(res[9])
        + "\n\nüìö *–í—Å—å–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤ —É –±–∞–∑—ñ ‚Äì *"
        + str(res[10])
        + "\nüéì    –î–ª—è –≥—Ä—É–ø ‚Äì "
        + str(res[11])
        + "\nüíº    –î–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ ‚Äì "
        + str(res[12]),
        parse_mode="MarkdownV2",
    )


async def last_activity(message: types.Message):
    res = await admin_data("last-activity")
    await message.answer(
        "üë§ *–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*\n"
        + "\n  –°—å–æ–≥–æ–¥–Ω—ñ ‚Äì "
        + str(res[0])
        + "\n  –¶—å–æ–≥–æ —Ç–∏–∂–Ω—è ‚Äì "
        + str(res[1])
        + "\n  –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è ‚Äì "
        + str(res[2])
        + "\n  –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ‚Äì "
        + str(res[3]),
        parse_mode="MarkdownV2",
    )


async def last_users(message: types.Message):
    res = await admin_data("last-users")
    mes = (
        "*–ö–æ—Ä–∏—Å—Ç—É–≤–∞–ª–∏—Å—è –±–æ—Ç–æ–º —Å—å–æ–≥–æ–¥–Ω—ñ ‚Äì "
        + str(len(res))
        + "\n\nTIME   |  UID               |  NAME*\n"
        + "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    )
    for r in res:
        mes += r[0].strftime("%H:%M") + "  |  " + str(r[1]) + "  |  " + r[2] + "\n"
    mes = await multy_replase(mes)
    await message.answer(mes, parse_mode="MarkdownV2")


async def all_active(message: types.Message):
    res = await admin_data("all-active")
    mes = (
        "*–ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ‚Äì "
        + str(len(res))
        + "\n\nDATE       |  UID               |  NAME and DATA*\n"
        + "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
    )
    for r in res:
        date = r[0].strftime("%m.%d.%y")
        mes += date + "  |  " + str(r[1]) + "  |  " + r[2] + " ‚Äì " + str(r[3]) + "\n"
    mes = await multy_replase(mes)
    await message.answer(mes, parse_mode="MarkdownV2")


# -----------------------------------------------------------
# Send users message
# -----------------------------------------------------------


class FSMSendMsg(StatesGroup):
    uid = State()
    tid = State()
    msg = State()


async def cancel_send(message: types.Message, state: FSMSendMsg):
    await state.finish()
    await message.answer("‚ùï –°–∫–∞—Å–æ–≤–∞–Ω–æ", parse_mode="MarkdownV2")


async def get_uid(message: types.Message, state: FSMContext):
    try:
        uid = int(message.text)
        res = 0
        if uid < 9223372036854775807 and uid > -9223372036854775807:
            res = await admin_data("user-uid", message.text)
        mes = ""
        if res:
            name = await multy_replase(res[0])
            mes = (
                "üóÇ –ó–Ω–∞–π—à–æ–≤ —É —Å–µ–±–µ –∑–∞ UID ‚Äì ["
                + name
                + "](tg://user?id="
                + message.text
                + ")\n\n"
            )
        else:
            mes = (
                "‚ö†Ô∏è –ú–æ–∂–ª–∏–≤–æ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π [UID](tg://user?id="
                + message.text
                + ") ‚ö†Ô∏è\n\n"
            )
        mes += (
            "–ß–µ–∫–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è\.\.\.\n"
            + " –Ø –º–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ:\n"
            + "  ‚Ä¢ –≤—ñ–¥–µ–æ\n"
            + "  ‚Ä¢ —Å—Ç—ñ–∫–µ—Ä\n"
            + "  ‚Ä¢ –≥–æ–ª–æ—Å–æ–≤–µ\n"
            + "  ‚Ä¢ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
            + "  ‚Ä¢ –∞—É–¥—ñ–æ \(mp3\)\n"
            + "  ‚Ä¢ –≤—ñ–¥–µ–æ \(–∫—Ä—É–∂–æ–∫\)\n"
            + "  ‚Ä¢ –∞–Ω—ñ–º–∞—Ü—ñ—é \(gif\)\n"
        )
        await message.answer(mes, parse_mode="MarkdownV2")
        await state.update_data(uid=message.text)
        await FSMSendMsg.last()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π UID")


async def get_tid(message: types.Message, state: FSMContext):
    pass


async def get_msg(message: types.ContentType.ANY, state: FSMContext):
    user_data = await state.get_data()
    uid = user_data["uid"]
    try:
        if message.animation:
            await bot.send_animation(
                uid,
                message.animation.file_id,
                caption=message.html_text,
                parse_mode="HTML",
            )
        if message.audio:
            await bot.send_audio(
                uid, message.audio.file_id, caption=message.html_text, parse_mode="HTML"
            )
        if message.document and not message.animation:
            await bot.send_document(
                uid,
                message.document.file_id,
                caption=message.html_text,
                parse_mode="HTML",
            )
        if message.photo:
            await bot.send_photo(
                uid,
                message.photo[0].file_id,
                caption=message.html_text,
                parse_mode="HTML",
            )
        if message.sticker:
            await bot.send_sticker(uid, message.sticker.file_id)
        if message.text:
            await bot.send_message(uid, message.html_text, parse_mode="HTML")
        if message.video:
            await bot.send_video(
                uid, message.video.file_id, caption=message.html_text, parse_mode="HTML"
            )
        if message.video_note:
            await bot.send_video_note(uid, message.video_note.file_id)
        if message.voice:
            await bot.send_voice(
                uid, message.voice.file_id, caption=message.html_text, parse_mode="HTML"
            )
        # TODO –î–æ—Ä–æ–±–∏—Ç–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è media_group
        # if message.media_group_id:
        #     await bot.send_media_group(uid, gr)
        await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
    except aiogram.utils.exceptions.ChatNotFound:
        await message.answer(
            "‚ùóÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ\n" + "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"
        )
    except aiogram.utils.exceptions.BotBlocked:
        await message.answer(
            "‚ùóÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ\n" + "‚õîÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞"
        )
    except Exception as e:
        await message.answer(
            "‚ùóÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ\n"
            + "‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞:\n\n"
            + str(e)
        )
    await state.finish()


async def send_msg_user(message: types.Message):
    await message.answer("üÜî –í–≤–µ–¥—ñ—Ç—å UID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram")
    await FSMSendMsg.uid.set()


# -----------------------------------------------------------
# Registration of all handlers
# -----------------------------------------------------------


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(admin, commands="admin", user_id=config("ADMIN_ID"))
    dp.register_message_handler(
        all_stats, commands="all_stats", user_id=config("ADMIN_ID")
    )
    dp.register_message_handler(
        last_activity, commands="last_activity", user_id=config("ADMIN_ID")
    )
    dp.register_message_handler(
        last_users, commands="last_users", user_id=config("ADMIN_ID")
    )
    dp.register_message_handler(
        all_active, commands="all_active", user_id=config("ADMIN_ID")
    )
    dp.register_message_handler(
        send_msg_user, commands="send_msg_user", user_id=config("ADMIN_ID")
    )
    dp.register_message_handler(
        cancel_send,
        commands="cancel",
        state=FSMSendMsg.all_states,
        chat_type=types.ChatType.PRIVATE,
    )
    dp.register_message_handler(
        get_uid, state=FSMSendMsg.uid, chat_type=types.ChatType.PRIVATE
    )
    dp.register_message_handler(
        get_tid, state=FSMSendMsg.tid, chat_type=types.ChatType.PRIVATE
    )
    dp.register_message_handler(
        get_msg,
        state=FSMSendMsg.msg,
        chat_type=types.ChatType.PRIVATE,
        content_types=[
            "animation",
            "audio",
            "document",
            "photo",
            "text",
            "video",
            "video_note",
            "voice",
            "sticker",
        ],
    )
