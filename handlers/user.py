from config import bot, dp, faculty
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from request import getFaculties
from keyboard import setKeyboard
from message import answer, reply

class FSMStudent(StatesGroup):
    faculty = State()
    group   = State()
    search  = State()



async def start(message: types.Message):
    await message.answer(
        "üëã *–ü—Ä–∏–≤—ñ—Ç!*\n\n"
        + "*–Ø* ‚Äì ü§ñ –ø–æ–º—ñ—á–Ω–∏–∫, —É —è–∫–æ–≥–æ,\n"
        + "—Ç–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å,\n"
        + "—è–∫—ñ –≤ —Ç–µ–±–µ –ø–∞—Ä–∏ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è.\n\n"
        + "ü¶æ –û–±–µ—Ä–∏ –¥–ª—è –∫–æ–≥–æ –±—É–¥–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏\n"
        + "—Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é –∑–Ω–∏–∑—É:\n\n"
        + "‚ùï–Ø–∫—â–æ –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ *‚åò*",
        parse_mode = "Markdown",
        reply_markup = await setKeyboard(None, 1),
    )


async def text(message: types.Message):
    match message.text:
        case "–°—Ç—É–¥–µ–Ω—Ç üéì":
            getFaculties()
            await FSMStudent.faculty.set()
            await answer(message, "faculty")
        case "–í–∏–∫–ª–∞–¥–∞—á üíº":
            print("–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞")


async def cancelFSMStudent(message: types.Message, state: FSMContext):
    await state.finish()
    await answer(message, "choice")


async def setStudentFaculty(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await cancelFSMStudent(message, state)
    elif message.text in faculty:
        await FSMStudent.next()
        await answer(message, "group")
    else:
        if await setKeyboard(message, 2.15):
            await FSMStudent.search.set()
            await reply(message, "goodsearch")
        else:
            await reply(message, "failsearch")
    print("–ö—ñ–Ω–µ—Ü—å 1 —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è")


async def setStudentGroup(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await FSMStudent.faculty.set()
        await answer(message, "faculty")
    else:
        await state.finish()
        print("–ö—ñ–Ω–µ—Ü—å 2 —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è")

async def setGroupSearch(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.finish()
        await FSMStudent.faculty.set()
        await answer(message, "faculty")
    else:
        print(message.text)
        await state.finish()

def register_handlers_user(dp: Dispatcher):
    dp.register_message_handler(start, commands="start", chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(cancelFSMStudent, commands="cancel", state="*", chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(text, chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(setStudentFaculty, state=FSMStudent.faculty, chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(setStudentGroup, state=FSMStudent.group, chat_type=types.ChatType.PRIVATE)
    dp.register_message_handler(setGroupSearch, state=FSMStudent.search, chat_type=types.ChatType.PRIVATE)

