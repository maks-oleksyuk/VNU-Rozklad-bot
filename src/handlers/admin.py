import os

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import exceptions
from bot.config import bot, multy_replase
from bot.database import admin_data
from decouple import config
from bot.keyboard import inline


async def admin(message: types.Message):
    """Getting access to admin commands.

    Args:
        message (types.Message): This object represents a message.
    """
    await message.answer(
        "*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º—ñ–Ω–∞:*\n\n"
        + "/stats ‚Äì –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        + "/activity ‚Äì –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        + "/all\_users ‚Äì –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        + "/last\_users ‚Äì UID –æ—Å—Ç–∞–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        + "/send\_msg ‚Äì –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n",
        parse_mode="MarkdownV2",
    )


async def stats(message: types.Message):
    """Getting statistics on users and schedules.

    Args:
        message (types.Message): This object represents a message.
    """
    res = await admin_data("stats")
    msg = (
            "üë§ *–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ‚Äì {}*\n"
            + "‚úÖ ` –ê–∫—Ç–∏–≤–Ω–∏—Ö      ‚Äì {}`\n"
            + "üö´ ` –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö  ‚Äì {}`\n"
            + "üéì ` –°—Ç—É–¥–µ–Ω—Ç—ñ–≤     ‚Äì {}`\n"
            + "üíº ` –í–∏–∫–ª–∞–¥–∞—á—ñ–≤    ‚Äì {}`\n"
            + "‚ö†Ô∏è ` –ù–µ–≤–∏–∑–Ω–∞—á–∏–ª–∏—Å—å ‚Äì {}`\n\n"
            + "üìö *–í—Å—å–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤ —É –±–∞–∑—ñ  ‚Äì {}*\n"
            + "üéì ` –î–ª—è –≥—Ä—É–ø       ‚Äì {}`\n"
            + "üíº ` –î–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ ‚Äì {}`\n"
    ).format(*res)
    await message.answer(msg, parse_mode="MarkdownV2")


async def activity(message: types.Message):
    """Sending bot usage statistics.

    Args:
        message (types.Message): This object represents a message.
    """
    res = await admin_data("activity")
    msg = (
            "üë®‚Äçüíª *–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:*"
            + "\n  ‚Ä¢  –°—å–æ–≥–æ–¥–Ω—ñ ‚Äì {}"
            + "\n  ‚Ä¢  –¶—å–æ–≥–æ —Ç–∏–∂–Ω—è ‚Äì {}"
            + "\n  ‚Ä¢  –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è ‚Äì {}"
            + "\n  ‚Ä¢  –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ‚Äì {}"
    ).format(*res)
    await message.answer(msg, parse_mode="MarkdownV2")


async def last_users(message: types.Message):
    """Getting the last bot users.

    Args:
        message (types.Message): This object represents a message.
    """
    res = await admin_data("last-users")
    msg = (
            "*–û—Å—Ç–∞–Ω–Ω—ñ 50 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤*\n\n`"
            + "   TIME  ‚îÉ        UID ‚îÉ NAME\n"
            + "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`\n"
    )
    for r in res:
        time = r[0].strftime("%H\:%M\:%S")
        empty = (10 - len(str(r[1]))) * " "
        name = await multy_replase(r[2], True)
        msg += "`{} ‚îÉ {}{} ‚îÉ `[{}](tg://user?id={})\n".format(
            time, empty, r[1], name, r[1]
        )
    await message.answer(msg, parse_mode="MarkdownV2")


async def all_users(message: types.Message):
    """Send a file with user data

    Args:
        message (types.Message): This object represents a message.
    """
    res = await admin_data("all-users")
    msg = (
            "DATE     ‚îÉ        UID ‚îÉ STATUS ‚îÉ DATA                      ‚îÉ NAME\n"
            + "‚îÅ" * 100
            + "\n"
    )
    users = open("all-users.txt", "w+")
    users.write(msg)
    for r in res:
        date = r[0].strftime("%m.%d.%y")
        e1 = (10 - len(str(r[1]))) * " "
        e2 = (25 - len(str(r[3]))) * " "
        msg = "{} ‚îÉ {}{} ‚îÉ  {}  ‚îÉ {}{} ‚îÉ {}\n".format(
            date, e1, r[1], r[2], r[3], e2, r[4]
        )
        users.write(msg)
    users.close()
    await bot.send_document(config("ADMIN_ID"), open("all-users.txt", "r"))
    os.remove("all-users.txt")


# -----------------------------------------------------------
# Send users message
# -----------------------------------------------------------


async def send_msg(message: types.Message):
    info = (
            " –Ø –º–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ:\n"
            + "  ‚Ä¢ –≤—ñ–¥–µ–æ\n"
            + "  ‚Ä¢ —Å—Ç—ñ–∫–µ—Ä\n"
            + "  ‚Ä¢ –≥–æ–ª–æ—Å–æ–≤–µ\n"
            + "  ‚Ä¢ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
            + "  ‚Ä¢ –∞—É–¥—ñ–æ (mp3)\n"
            + "  ‚Ä¢ –≤—ñ–¥–µ–æ (–∫—Ä—É–∂–æ–∫)\n"
            + "  ‚Ä¢ –∞–Ω—ñ–º–∞—Ü—ñ—é (gif)\n\n"
            + "–î–ª—è –∫–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è‚ùî"
    )
    await message.answer(info, reply_markup=await inline("who"))


async def callback(call: types.CallbackQuery, state: FSMContext):
    if call.data == "all":
        msg = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n\n–û—á—ñ–∫—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
        await call.message.edit_text(msg, reply_markup=await inline("back"))
        await FSMSendMsg.msg.set()
    elif call.data == "group":
        msg = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –ø–µ–≤–Ω—ñ–π –≥—Ä—É–ø—ñ\n\n–û—á—ñ–∫—É—é –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –∞–±–æ —ó—ó ID..."
        await call.message.edit_text(msg, reply_markup=await inline("back"))
    elif call.data == "user":
        msg = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ª–∏—à–µ 1 —é–∑–µ—Ä—É\n\n–û—á—ñ–∫—É—é UID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞..."
        await call.message.edit_text(msg, reply_markup=await inline("back"))

    elif call.data == "back":
        info = (
                " –Ø –º–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ:\n"
                + "  ‚Ä¢ –≤—ñ–¥–µ–æ\n"
                + "  ‚Ä¢ —Å—Ç—ñ–∫–µ—Ä\n"
                + "  ‚Ä¢ –≥–æ–ª–æ—Å–æ–≤–µ\n"
                + "  ‚Ä¢ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
                + "  ‚Ä¢ –∞—É–¥—ñ–æ (mp3)\n"
                + "  ‚Ä¢ –≤—ñ–¥–µ–æ (–∫—Ä—É–∂–æ–∫)\n"
                + "  ‚Ä¢ –∞–Ω—ñ–º–∞—Ü—ñ—é (gif)\n\n"
                + "–î–ª—è –∫–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è‚ùî"
        )
        await state.finish()
        await call.message.edit_text(info, reply_markup=await inline("who"))

    elif call.data == "confirm":
        await send_all(None, state)
        await state.finish()
        await call.message.edit_text("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ")
    elif call.data == "cancel":
        await call.message.edit_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùï")
        await state.finish()

    await call.answer()


class FSMSendMsg(StatesGroup):
    uid = State()
    tid = State()
    msg = State()
    send = State()


# async def cancel_send(message: types.Message, state: FSMSendMsg):
#     await state.finish()
#     await message.answer("‚ùï –°–∫–∞—Å–æ–≤–∞–Ω–æ", parse_mode="MarkdownV2")


# async def get_uid(message: types.Message, state: FSMContext):
#     try:
#         uid = int(message.text)
#         res = 0
#         if uid < 9223372036854775807 and uid > -9223372036854775807:
#             res = await admin_data("user-uid", message.text)
#         mes = ""
#         if res:
#             name = await multy_replase(res[0])
#             mes = (
#                 "üóÇ –ó–Ω–∞–π—à–æ–≤ —É —Å–µ–±–µ –∑–∞ UID ‚Äì ["
#                 + name
#                 + "](tg://user?id="
#                 + message.text
#                 + ")\n\n"
#             )
#         else:
#             mes = (
#                 "‚ö†Ô∏è –ú–æ–∂–ª–∏–≤–æ —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π [UID](tg://user?id="
#                 + message.text
#                 + ") ‚ö†Ô∏è\n\n"
#             )
#         mes += (
#             "–ß–µ–∫–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è\.\.\.\n"
#             + " –Ø –º–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ:\n"
#             + "  ‚Ä¢ –≤—ñ–¥–µ–æ\n"
#             + "  ‚Ä¢ —Å—Ç—ñ–∫–µ—Ä\n"
#             + "  ‚Ä¢ –≥–æ–ª–æ—Å–æ–≤–µ\n"
#             + "  ‚Ä¢ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
#             + "  ‚Ä¢ –∞—É–¥—ñ–æ \(mp3\)\n"
#             + "  ‚Ä¢ –≤—ñ–¥–µ–æ \(–∫—Ä—É–∂–æ–∫\)\n"
#             + "  ‚Ä¢ –∞–Ω—ñ–º–∞—Ü—ñ—é \(gif\)\n"
#         )
#         await message.answer(mes, parse_mode="MarkdownV2")
#         await state.update_data(uid=message.text)
#         await FSMSendMsg.last()
#     except ValueError:
#         await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π UID")


# async def get_tid(message: types.Message, state: FSMContext):
#     pass


async def get_msg(message: types.ContentType.ANY, state: FSMContext):
    await state.update_data(msg=message)
    # fff = await messages.getMessages()
    await send_all(message, None)
    # await bot.delete_message(message.chat.id, message.message_id - 1)
    # await bot.delete_message(message.chat.id, message.message_id)
    await message.answer(
        "–¢–∞–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á", reply_markup=await inline("confirm")
    )


async def send_all(
        message: types.Message, state: FSMContext, data=[config("ADMIN_ID")], all=True
):
    chat = config("ADMIN_ID")
    if state:
        user_data = await state.get_data()
        message = user_data["msg"]
        message.message_id = message.message_id + 1
        chat = message.from_user.id
    if all:
        data = [config("ADMIN_ID")]
    for uid in data:
        try:
            try:
                text = message.html_text
            except:
                text = ""
            await bot.copy_message(
                uid, chat, message.media_group_id, text, parse_mode="HTML"
            )
        except exceptions.ChatNotFound:
            # await message.answer(
            #     "‚ùóÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ\n" + "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"
            # )
            pass
        except exceptions.BotBlocked:
            # await message.answer(
            #     "‚ùóÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ\n" + "‚õîÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞"
            # )
            pass
        except Exception as e:
            pass
            # await message.answer(
            #     "‚ùóÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ\n"
            #     + "‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞:\n\n"
            #     + str(e)
            # )

    # user_data = await state.get_data()
    # uid = user_data["uid"]


#     await state.finish()


# -----------------------------------------------------------
# Registration of all handlers
# -----------------------------------------------------------


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(admin, commands="admin", user_id=config("ADMIN_ID"))
    dp.register_message_handler(stats, commands="stats", user_id=config("ADMIN_ID"))
    dp.register_message_handler(
        activity, commands="activity", user_id=config("ADMIN_ID")
    )
    dp.register_message_handler(
        all_users, commands="all_users", user_id=config("ADMIN_ID")
    )
    dp.register_message_handler(
        last_users, commands="last_users", user_id=config("ADMIN_ID")
    )
    dp.register_message_handler(
        send_msg, commands="send_msg", user_id=config("ADMIN_ID")
    )
    # dp.register_message_handler(
    #     cancel_send,
    #     commands="cancel",
    #     state=FSMSendMsg.all_states,
    #     chat_type=types.ChatType.PRIVATE,
    # )
    # dp.register_message_handler(
    #     get_uid, state=FSMSendMsg.uid, chat_type=types.ChatType.PRIVATE
    # )
    # dp.register_message_handler(
    #     get_tid, state=FSMSendMsg.tid, chat_type=types.ChatType.PRIVATE
    # )
    dp.register_message_handler(
        get_msg,
        state=FSMSendMsg.msg,
        chat_type=types.ChatType.PRIVATE,
        content_types=[
            "animation",
            "audio",
            "document",
            "photo",
            "text",
            "video",
            "video_note",
            "voice",
            "sticker",
        ],
    )
    dp.register_callback_query_handler(callback, state="*")
