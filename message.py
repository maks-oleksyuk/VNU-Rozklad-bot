from aiogram import types
from keyboard import setKeyboard

async def answer(message: types.Message, option, data):
    match option:
        case "start":
            await message.answer(
                "üëã *–ü—Ä–∏–≤—ñ—Ç\!*\n\n"
                + "*–Ø* ‚Äì ü§ñ –ø–æ–º—ñ—á–Ω–∏–∫, —É —è–∫–æ–≥–æ,\n"
                + "—Ç–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å,\n"
                + "—è–∫—ñ –≤ —Ç–µ–±–µ –ø–∞—Ä–∏ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è\.\n\n"
                + "ü¶æ –û–±–µ—Ä–∏ –¥–ª—è –∫–æ–≥–æ –±—É–¥–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏\n"
                + "—Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é –∑–Ω–∏–∑—É:\n\n"
                + "‚ùï–Ø–∫—â–æ –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ *‚åò*",
                parse_mode = "MarkdownV2",
                reply_markup = await setKeyboard(None, "choice"),
            )
        case "choice":
            await message.answer(
                "ü¶æ –û–±–µ—Ä–∏ –¥–ª—è –∫–æ–≥–æ –±—É–¥–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏\n"
                + "—Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é –∑–Ω–∏–∑—É:",
                reply_markup = await setKeyboard(None, "choice"),
            )
        case "chair":
            await message.answer(
                "üìÅ –û–±–µ—Ä–∏ *–∫–∞—Ñ–µ–¥—Ä—É* –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ\n"
                + "–≤–≤–µ–¥–∏ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø–æ—à—É–∫—É üîé",
                parse_mode = "Markdown",
                reply_markup = await setKeyboard(None, "chair"),
            )
        case "faculty":
            await message.answer(
                "üìÅ –û–±–µ—Ä–∏ *—Ñ–∞–∫—É–ª—å—Ç–µ—Ç* –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ\n"
                + "–≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –¥–ª—è –ø–æ—à—É–∫—É üîé",
                parse_mode = "Markdown",
                reply_markup = await setKeyboard(None, "faculty"),
            )
        case "surname":
            await message.answer(
                "üìÇ –û–±–µ—Ä–∏ *–≤–∏–∫–ª–∞–¥–∞—á–∞* –∑—ñ —Å–ø–∏—Å–∫—É:\n",
                parse_mode = "Markdown",
                reply_markup = await setKeyboard(message, "surname"),
            )
        case "group":
            await message.answer(
                "üìÇ –û–±–µ—Ä–∏ *–≥—Ä—É–ø—É* –∑—ñ —Å–ø–∏—Å–∫—É:\n",
                parse_mode = "Markdown",
                reply_markup = await setKeyboard(message, "group"),
            )
        case "data":
            await message.answer(
                data, parse_mode="MarkdownV2",
                reply_markup = await setKeyboard(None, "timetable"))

        case "not_data":
            await message.answer(
                "üåÄ –û–±–µ—Ä–∏ –¥–ª—è –∫–æ–≥–æ –±—É–¥–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥",
                reply_markup = await setKeyboard(None, "choice"))

async def reply(message: types.Message, option):
    match option:
        case "goodsearchGroup":
            await message.reply(
                "üóÇ –û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤:",
                reply_markup = await setKeyboard(message, "searchGroup"),
            )
        case "failsearchGroup":
            await message.reply(
                "–ó–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüßê\n\n"
                + "‚ÅâÔ∏è –í–∫–∞–∂—ñ—Ç—å –±—ñ–ª—å—à —Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ\n"
                + "üìÅ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∑–Ω–∏–∑—É:",
                reply_markup = await setKeyboard(message, "faculty"),
            )
        case "goodsearchTeacher":
            await message.reply(
                "üóÇ –û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤:",
                reply_markup = await setKeyboard(message, "searchTeacher"),
            )
        case "failsearchTeacher":
            await message.reply(
                "–ó–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüßê\n\n"
                + "‚ÅâÔ∏è –í–∫–∞–∂—ñ—Ç—å –±—ñ–ª—å—à —Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ\n"
                + "üìÅ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∑–Ω–∏–∑—É:",
                reply_markup = await setKeyboard(message, "chair"),
            )
    