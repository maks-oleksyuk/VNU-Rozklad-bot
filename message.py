from aiogram import types

from keyboard import setKeyboard


async def answer(message: types.Message, option, data=None):
    """Sending a message using the answer aiogram method

    Args:
        message (types.Message): Message with additional data
        option (str): Message identifier to send
        data (str, optional): Data to send. Defaults to None.
    """
    match option:
        case "start":
            await message.answer(
                "üëã *–ü—Ä–∏–≤—ñ—Ç\!*\n\n"
                + "*–Ø* ‚Äì ü§ñ –ø–æ–º—ñ—á–Ω–∏–∫, —É —è–∫–æ–≥–æ,\n"
                + "—Ç–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å,\n"
                + "—è–∫—ñ –≤ —Ç–µ–±–µ –ø–∞—Ä–∏ –ø—Ä–æ—Ç—è–≥–æ–º —Ç–∏–∂–Ω—è\.\n\n"
                + "ü¶æ –û–±–µ—Ä–∏ –¥–ª—è –∫–æ–≥–æ –±—É–¥–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏\n"
                + "—Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é –∑–Ω–∏–∑—É:\n\n"
                + "‚ùï–Ø–∫—â–æ –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ *‚åò*",
                parse_mode = "MarkdownV2",
                reply_markup = await setKeyboard("choice"),
            )
        case "choice":
            await message.answer(
                "ü¶æ –û–±–µ—Ä–∏ –¥–ª—è –∫–æ–≥–æ –±—É–¥–µ–º–æ —Ñ–æ—Ä–º—É–≤–∞—Ç–∏\n"
                + "—Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é –∑–Ω–∏–∑—É:",
                reply_markup = await setKeyboard("choice"),
            )
        case "chair":
            await message.answer(
                "üìÅ –û–±–µ—Ä–∏ *–∫–∞—Ñ–µ–¥—Ä—É* –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ\n"
                + "–≤–≤–µ–¥–∏ –ø—Ä—ñ–∑–≤–∏—â–µ –¥–ª—è –ø–æ—à—É–∫—É üîé",
                parse_mode = "Markdown",
                reply_markup = await setKeyboard("chair"),
            )
        case "faculty":
            await message.answer(
                "üìÅ –û–±–µ—Ä–∏ *—Ñ–∞–∫—É–ª—å—Ç–µ—Ç* –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ\n"
                + "–≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –¥–ª—è –ø–æ—à—É–∫—É üîé",
                parse_mode = "Markdown",
                reply_markup = await setKeyboard("faculty"),
            )
        case "surname":
            await message.answer(
                "üìÇ –û–±–µ—Ä–∏ *–≤–∏–∫–ª–∞–¥–∞—á–∞* –∑—ñ —Å–ø–∏—Å–∫—É:\n",
                parse_mode = "Markdown",
                reply_markup = await setKeyboard("surname", message),
            )
        case "group":
            await message.answer(
                "üìÇ –û–±–µ—Ä–∏ *–≥—Ä—É–ø—É* –∑—ñ —Å–ø–∏—Å–∫—É:\n",
                parse_mode = "Markdown",
                reply_markup = await setKeyboard("group", message),
            )
        case "data":
            await message.answer(
                data, parse_mode="MarkdownV2",
                reply_markup = await setKeyboard("timetable", message))
        case "no-data":
            await message.answer(
                "üåÄ –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö",
                reply_markup = await setKeyboard("choice"))
        case "set-date":
            await message.answer(
                "üìÜ *–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É:*\n"
                + "‚òùÔ∏è –ù–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç ‚Äì `YYYY-mm-dd`\n"
                + "–∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–∫–æ–∂ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö\n\n"
                + "/cancel ‚Äì –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏",
                parse_mode="MarkdownV2")
        case "error-date":
            await message.answer(
                "‚ùóÔ∏è *–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏* ‚ùóÔ∏è\n"
                + "üåÄ –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É —â–µ —Ä–∞–∑\n\n"
                + "‚òùÔ∏è –ù–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç ‚Äì `YYYY-mm-dd`\n\n"
                + "/cancel ‚Äì –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏",
                parse_mode="MarkdownV2")
        case "cancel-date":
            await message.answer("‚ùï –í–≤–µ–¥–µ–Ω—è –¥–∞—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")


async def reply(message: types.Message, option):
    """Sending a message using the reply aiogram method

    Args:
        message (types.Message): Message with additional data
        option (str): Message identifier to send
    """
    match option:
        case "good-search-group":
            await message.reply(
                "üóÇ –û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤:",
                reply_markup = await setKeyboard("search-group", message),
            )
        case "fail-search-group":
            await message.reply(
                "–ó–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüßê\n\n"
                + "‚ÅâÔ∏è –í–∫–∞–∂—ñ—Ç—å –±—ñ–ª—å—à —Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ\n"
                + "üìÅ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∑–Ω–∏–∑—É:",
                reply_markup = await setKeyboard("faculty", message),
            )
        case "good-search-teacher":
            await message.reply(
                "üóÇ –û—Å—å —â–æ —è –∑–Ω–∞–π—à–æ–≤:",
                reply_markup = await setKeyboard("search-teacher", message),
            )
        case "fail-search-teacher":
            await message.reply(
                "–ó–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüßê\n\n"
                + "‚ÅâÔ∏è –í–∫–∞–∂—ñ—Ç—å –±—ñ–ª—å—à —Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ\n"
                + "üìÅ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∑–Ω–∏–∑—É:",
                reply_markup = await setKeyboard("chair", message),
            )
    